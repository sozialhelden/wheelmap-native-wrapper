fastlane_require 'dotenv'
fastlane_require 'pp'

require_relative 'update_xml_text.rb'
require_relative 'add_metadata'
require_relative 'set_xml_attribute'


app_env_fields=['PROJECT_APP_NAME', 'PROJECT_HOST_NAME', 'PROJECT_PRIMARY_COLOR']

before_all do
  Dotenv.require_keys('PROJECT_ENV')

  project = ENV['PROJECT_ENV']
  UI.message("Building for project environment #{project}")
  # path relative to Fastfile
  configuration_path = "../env/#{project}/Configuration.env"
  secret_path = "../env/#{project}/Secret.env"

  conf_loaded = Dotenv.load(configuration_path)
  secret_loaded = Dotenv.overload(secret_path)

  if conf_loaded.empty?
    UI.crash!("🐞 Environment in #{configuration_path} was not found or is empty.")
  end

  if secret_loaded.empty?
    UI.error("⚠️ Environment in #{secret_path} was not found or is empty. Not all integrations will work.")
  end

  Dotenv.require_keys('PROJECT_ID')
end


desc 'Configure the project from the environent'
private_lane :notify_deployment do |options|
  message = options[:message]
  payload = options[:payload]

  should_post_on_slack = ENV['SLACK_URL'] && ENV['SLACK_USERNAME']

  UI.message(message)
  payload.each do |key, value|
    UI.message "#{key} => #{value}"
  end

  if should_post_on_slack
    slack(
      message: message,
      username: ENV['SLACK_USERNAME'],
      slack_url: ENV['SLACK_URL'],
      channel: ENV['SLACK_CHANNEL'], # Optional, by default will post to the default channel configured for the POST URL.
      success: true, # Optional, defaults to true.
      payload: payload,
      default_payloads: [], # Optional, lets you specify a whitelist of default payloads to include. Pass an empty array to suppress all the default payloads.
      # Don't add this key, or pass nil, if you want all the default payloads. The available default payloads are: `lane`, `test_result`, `git_branch`, `git_author`, `last_git_commit_message`, `last_git_commit_hash`.
      attachment_properties: { # Optional, lets you specify any other properties available for attachments in the slack API (see https://api.slack.com/docs/attachments).
        # This hash is deep merged with the existing properties set using the other properties above. This allows your own fields properties to be appended to the existing fields that were created using the `payload` property for instance.
      }
    )
  end
end

### ------------ ANDROID ------------ ###
platform :android do
  manifest_file = File.expand_path('../android/app/src/main/AndroidManifest.xml', __dir__)
  app_name_strings_file = File.expand_path('../android/app/src/main/res/values/strings.xml', __dir__)
  colors_file = File.expand_path('../android/app/src/main/res/values/colors.xml', __dir__)

  ######################### PRIVATE LANES ##########################

  desc 'Configure the project from the environent'
  private_lane :configure do |_options|
    create_icons()
    update_manifest()

    # primary color
    new_color = ENV['PROJECT_PRIMARY_COLOR']
    new_color = "##{new_color}" unless new_color.start_with?('#')
    update_xml_text(colors_file, '//resources/color[@name="primary"]', new_color)

    # add metadata
    add_metadata(manifest_file, app_env_fields)
  end


  desc 'Fill the correct values into the manifest file'
  private_lane :update_manifest do
    # change both host entries
    project_host_name = ENV['PROJECT_HOST_NAME']
    set_xml_attribute(manifest_file, '//manifest/application/intent-filter/data[1][@android:scheme]', 'android:host', project_host_name)
    set_xml_attribute(manifest_file, '//manifest/application/intent-filter/data[2][@android:scheme]', 'android:host', project_host_name)

    # set project app name
    project_app_name = ENV['PROJECT_APP_NAME']
    update_xml_text(app_name_strings_file, '//resources/string[@name="app_name"]', project_app_name)
  end

  desc 'Create the app icons'
  lane :create_icons do
    project = ENV['PROJECT_ENV']

    android_appicon(
      appicon_image_file: "./env/#{project}/AppIcon.png",
      appicon_icon_types: [:launcher],
      appicon_path: 'android/app/src/main/res/mipmap'
    )

    android_appicon(
      appicon_image_file: "./env/#{project}/NotificationIcon.png",
      appicon_icon_types: [:notification],
      appicon_path: 'android/app/src/main/res/drawable',
      appicon_filename: 'ic_appbar'
    )

    # convert svg to vector, relative to fastlane path
    sh('../tools/vd-tool/bin/vd-tool', "-c", "-in", "../env/#{project}/", "-out", "../android/app/src/main/res/drawable/")

    FileUtils.cp("../env/#{project}/LaunchBackground.png", '../android/app/src/main/res/drawable-xxhdpi/im_loader_background.png')
  end

  ######################### PUBLIC LANES ###########################

  desc 'Build the app package locally'
  lane :development do
    configure()
    gradle(
      project_dir: './android/',
      build_type: "Debug",
      task: 'clean assemble'
    )
  end

  desc 'Make a release build'
  lane :release_build do |options|
    configure()

    # strip out invalid fields
    sign_options = {
      "android.injected.signing.store.file" => File.expand_path(ENV['ANDROID_KEYSTORE_PATH']),
      "android.injected.signing.key.alias" => ENV['ANDROID_KEY_ALIAS'],
      "android.injected.signing.store.password" => ENV['ANDROID_KEYSTORE_PASSWORD'] || '',
      "android.injected.signing.key.password" => ENV['ANDROID_KEYSTORE_PASSWORD'] || '',
    }

    gradle(
      project_dir: './android/',
      build_type: options[:build_type] || 'Release',
      task: 'assemble',
      print_command: false, # hide signing from logs
      properties: sign_options
    )
  end

  desc "Make screenshots for PlayStore"
  lane :screenshots do
    release_build()
    upload_to_browserstack_app_automate(
      browserstack_username: ENV['BROWSERSTACK_USERNAME'],
      browserstack_access_key: ENV['BROWSERSTACK_ACCESS_KEY'],
      file_path: lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    )
    Dir.chdir("../tools/generate-screenshots") do
      sh(['npx', 'wdio', '-l', 'warn', 'parallel.conf.js'])
    end
  end

  desc 'Build the app package and deploy to hockey app and play store beta'
  lane :beta do
    increment_version_code()
    release_build(build_type: 'playstore')
    apk_file_name = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    # hockey(
    #   api_token: ENV['HOCKEY_API_TOKEN_ANDROID'],
    #   apk: apk_file_name
    # )
    supply(
      apk: apk_file_name,
      track: 'beta',
      package_name: ENV['ANDROID_PROJECT_APP_ID']
    )
    notify_deployment(
      message: 'Android beta successfully released to Play Store!',
      payload: {
        'Project' => ENV['PROJECT_ENV'],
        'Site' => "https://#{ENV['PROJECT_HOST_NAME']}",
      }
    )
  end
end

### ------------ IOS ------------ ###
platform :ios do
  xcodeproj_path = 'ios/ios-pwa-wrapper.xcodeproj'
  info_plist_path = 'ios-pwa-wrapper/Info.plist'

  ######################### PRIVATE LANES ##########################

  desc 'Configure the project from the environent'
  private_lane :configure do |options|
    automatic_code_signing(
      use_automatic_signing: true,
      path: xcodeproj_path
    )

    # Set bundle & app name
    update_app_identifier(
      plist_path: info_plist_path,
      app_identifier: ENV['IOS_PROJECT_BUNDLE_ID'],
      xcodeproj: xcodeproj_path
    )

    update_info_plist(
      plist_path: info_plist_path,
      display_name: ENV['PROJECT_APP_NAME'],
      xcodeproj: xcodeproj_path
    )

    create_icons()

    configPlistPath = 'ios/ios-pwa-wrapper/Configuration.plist'

    app_env_fields.each do |key|
      set_info_plist_value(path: configPlistPath, key: key, value: ENV[key])
    end
  end

  desc 'Create the app icons'
  private_lane :create_icons do
    project = ENV['PROJECT_ENV']
    appicon(
      appicon_image_file: "env/#{project}/AppIcon.png",
      appicon_path: 'ios/ios-pwa-wrapper/Images.xcassets',
      appicon_devices: %i[ipad iphone ios_marketing watch watch_marketing]
    )

    # pathes relative to fastfile
    FileUtils.cp("../env/#{project}/LaunchIcon.png", '../ios/ios-pwa-wrapper/Images.xcassets/LaunchIcon.imageset/')
    FileUtils.cp("../env/#{project}/LaunchIcon@2x.png", '../ios/ios-pwa-wrapper/Images.xcassets/LaunchIcon.imageset/')
    FileUtils.cp("../env/#{project}/LaunchIcon@3x.png", '../ios/ios-pwa-wrapper/Images.xcassets/LaunchIcon.imageset/')
    FileUtils.cp("../env/#{project}/LaunchBackground.png", '../ios/ios-pwa-wrapper/Images.xcassets/LaunchBackground.imageset/')
  end

  ######################### PUBLIC LANES ###########################

  desc 'Creates a local build of the app, configured from the env/project'
  lane :development do
    configure(export_method: 'development')
    gym(
      export_method: 'development',
      # static options
      configuration: 'Debug',
      project: xcodeproj_path,
      scheme: 'ios-pwa-wrapper',
      output_directory: 'fastlane/debug-ipa',
      # xcargs: '-allowProvisioningUpdates',
      # export_xcargs: '-allowProvisioningUpdates',
      silent: false,
      clean: true,
      suppress_xcode_output: false,
      # env options
      output_name: ENV['PROJECT_APP_NAME'],
      catalyst_platform: ENV['CATALYST_PLATFORM']
    )
    # open in xcode, relative to fastlane path
    sh('open', "../#{xcodeproj_path}")
  end

  desc 'Make a release build'
  lane :release_build do
    configure()
    match(
      type: 'appstore'
    )
    gym(
      export_method: 'app-store',
      # static options
      configuration: 'Release',
      project: xcodeproj_path,
      scheme: 'ios-pwa-wrapper',
      output_directory: 'fastlane/ipa',
      xcargs: '-allowProvisioningUpdates',
      export_xcargs: '-allowProvisioningUpdates',
      silent: false,
      clean: true,
      suppress_xcode_output: false,
      # env options
      output_name: ENV['PROJECT_APP_NAME'],
      catalyst_platform: ENV['CATALYST_PLATFORM']
    )
  end

  desc "Make screenshots for App Store"
  lane :screenshots do
    # sets BROWSERSTACK_APP_ID automatically
    upload_to_browserstack_app_automate(
      browserstack_username: ENV['BROWSERSTACK_USERNAME'],
      browserstack_access_key: ENV['BROWSERSTACK_ACCESS_KEY'],
      file_path: "fastlane/ipa/#{ENV['PROJECT_APP_NAME']}.ipa"
    )
    Dir.chdir('../tools/generate-screenshots') do
      sh(['npx', 'wdio', '-l', 'warn', 'parallel.conf.js'])
    end
  end

  desc 'Deploys a beta build of the app to testflight, configured from the env/project'
  lane :beta do
    increment_build_number(
      xcodeproj: xcodeproj_path
    )
    release_build()
    upload_to_testflight(
      ipa: "fastlane/ipa/#{ENV['PROJECT_APP_NAME']}.ipa",
    )
    notify_deployment(
      message: 'iOS beta successfully released to the AppStore! You can be a beta tester by opening the beta link on your iPhone (Note that the build can appear with a delay).',
      payload: {
        'Project' => ENV['PROJECT_ENV'],
        'Site' => "https://#{ENV['PROJECT_HOST_NAME']}",
        'Beta Test Url' => ENV['IOS_BETA_TEST_URL']
      }
    )
  end
end



### ------------ IOS ------------ ###
platform :mac do
  xcodeproj_path = 'ios/ios-pwa-wrapper.xcodeproj'
  info_plist_path = 'ios-pwa-wrapper/Info.plist'

  desc 'Configure the project from the environent'
  private_lane :configure do |options|
    automatic_code_signing(
      use_automatic_signing: true,
      path: xcodeproj_path
    )

    # Set bundle & app name
    update_app_identifier(
      plist_path: info_plist_path,
      app_identifier: ENV['IOS_PROJECT_BUNDLE_ID'],
      xcodeproj: xcodeproj_path
    )

    update_info_plist(
      plist_path: info_plist_path,
      display_name: ENV['PROJECT_APP_NAME'],
      xcodeproj: xcodeproj_path
    )

    configPlistPath = 'ios/ios-pwa-wrapper/Configuration.plist'

    app_env_fields.each do |key|
      set_info_plist_value(path: configPlistPath, key: key, value: ENV[key])
    end
  end

  ######################### PUBLIC LANES ###########################

  desc 'Creates a local build of the app, configured from the env/project'
  lane :development do
    configure(export_method: 'development')
    match(
      type: 'development',
      platform: "macos"
    )
    gym(
      export_method: 'development',
      # static options
      configuration: 'Debug',
      project: xcodeproj_path,
      scheme: 'ios-pwa-wrapper',
      output_directory: 'fastlane/debug-ipa',
      # xcargs: '-allowProvisioningUpdates',
      # export_xcargs: '-allowProvisioningUpdates',
      silent: false,
      clean: true,
      suppress_xcode_output: false,
      # env options
      output_name: ENV['PROJECT_APP_NAME'],
      catalyst_platform: ENV['CATALYST_PLATFORM']
    )
    # open in xcode, relative to fastlane path
    sh('open', "../#{xcodeproj_path}")
  end

  desc 'Make a release build'
  lane :release_build do
    match(
      type: 'appstore',
      platform: "macos"
    )
    gym(
      export_method: 'app-store',
      # static options
      configuration: 'Release',
      project: xcodeproj_path,
      scheme: 'ios-pwa-wrapper',
      output_directory: 'fastlane/ipa',
      xcargs: '-allowProvisioningUpdates',
      export_xcargs: '-allowProvisioningUpdates',
      silent: false,
      clean: true,
      suppress_xcode_output: false,
      # env options
      output_name: ENV['PROJECT_APP_NAME'],
      catalyst_platform: ENV['CATALYST_PLATFORM']
    )
  end
end
