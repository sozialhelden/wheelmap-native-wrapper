
fastlane_require 'dotenv'

Dotenv.require_keys("PROJECT_ENV")

project = ENV["PROJECT_ENV"]
puts "PROJECT_ENV: #{project}"
# path relative to Fastfile
res = Dotenv.load("../env/#{project}/Configuration")

Dotenv.require_keys("PROJECT_ID")


### ------------ ANDROID ------------ ###
platform :android do
  manifestFile = './android/app/src/main/AndroidManifest.xml'
  appNameStringsFile = './android/app/src/main/res/values/strings.xml'

  ######################### PRIVATE LANES ##########################

  desc "Configure the project from the environent"
  private_lane :configure do |options|
    create_icons()
    update_manifest()
  end

  desc "Fill the correct values into the manifest file"
  private_lane :update_manifest do 
    # change both host entries
    xml_set_attribute(path_to_xml_file: manifestFile, xml_path: '//manifest//application//intent-filter//data[1][@android:scheme]', attribute_name: 'android:host', attribute_value: ENV["PROJECT_HOST_NAME"])
    xml_set_attribute(path_to_xml_file: manifestFile, xml_path: '//manifest//application//intent-filter//data[2][@android:scheme]', attribute_name: 'android:host', attribute_value: ENV["PROJECT_HOST_NAME"])

    xml_editor(path_to_xml_file: appNameStringsFile, xml_path: '//resources//string[@name=\'app_name\']', new_value: ENV["PROJECT_APP_NAME"])
  end

  desc "Create the app icons"
  private_lane :create_icons do
    project = ENV["PROJECT_ENV"]

    android_appicon(
      appicon_image_file: "./env/#{project}/AppIcon.png",
      appicon_icon_types: [:launcher],
      appicon_path: 'android/app/src/main/res/mipmap'
    )    
    android_appicon(
      appicon_image_file: "./env/#{project}/NotificationIcon.png",
      appicon_icon_types: [:notification],
      appicon_path: 'android/app/src/main/res/drawable',
      appicon_filename: 'ic_appbar'
    )
  end

  ######################### PUBLIC LANES ###########################

  desc "Build the app package locally"
  lane :development do
    configure()
    gradle(
      project_dir: "./android/",
      task: "clean assembleRelease"
    )
  end
end

### ------------ IOS ------------ ###
platform :ios do

  ######################### PRIVATE LANES ##########################

  desc "Configure the project from the environent"
  private_lane :configure do |options|
    match(type: options[:export_method])
    # Build the iOS app, with enabling the code signing automatically
    automatic_code_signing(
      use_automatic_signing: true,
      path: "ios/ios-pwa-wrapper.xcodeproj"
    )
    # Set bundle & app name
    update_app_identifier(
      plist_path: '../ios/ios-pwa-wrapper/Info.plist',
      app_identifier: ENV["IOS_PROJECT_BUNDLE_ID"],
      xcodeproj: "ios/ios-pwa-wrapper.xcodeproj",
    )
    update_info_plist(
      plist_path: 'ios-pwa-wrapper/Info.plist',
      display_name: ENV["PROJECT_APP_NAME"],
      xcodeproj: "ios/ios-pwa-wrapper.xcodeproj",
    )
    create_icons()
  end

  desc "Create the app icons"
  private_lane :create_icons do
    project = ENV["PROJECT_ENV"]
    appicon(
      appicon_image_file: "env/#{project}/AppIcon.png",
      appicon_path: "ios/ios-pwa-wrapper/Images.xcassets",
      appicon_devices: [:ipad, :iphone, :ios_marketing, :watch, :watch_marketing]
    )
  end

  ######################### PUBLIC LANES ###########################

  desc "Creates a local build of the app, configured from the env/project"
  lane :development do
    configure(export_method: 'development')
    # open in xcode, relative to fastlane path
    sh("open", "../ios/ios-pwa-wrapper.xcodeproj")
  end

  #--------------------- Create the app icons  ---------------------#
  lane :release_build do
    configure(export_method: 'appstore')
    gym(
      export_method: 'app-store',
      # static options
      configuration: "Release",
      project: "ios/ios-pwa-wrapper.xcodeproj",
      scheme: "ios-pwa-wrapper",
      output_directory: "fastlane/ipa",
      xcargs: "-allowProvisioningUpdates",
      export_xcargs: "-allowProvisioningUpdates",
      silent: false,
      clean: true,
      suppress_xcode_output: false,
      # env options
      output_name: ENV["PROJECT_APP_NAME"],
    )
  end

  desc "Deploys a release build of the app, configured from the env/project"
  lane :app_store do
    release_build()
    # TODO: Upload to store
  end

  desc "Deploys a beta build of the app to testflight, configured from the env/project"
  lane :beta do
    increment_build_number(
      xcodeproj: "ios/ios-pwa-wrapper.xcodeproj",
    )
    release_build()
    upload_to_testflight(
      ipa: "fastlane/ipa/#{ENV["PROJECT_APP_NAME"]}.ipa"
    )
  end
end