fastlane_require 'dotenv'
fastlane_require 'pp'

before_all do
  Dotenv.require_keys('PROJECT_ENV')

  project = ENV['PROJECT_ENV']
  UI.message("Building for project environment #{project}")
  # path relative to Fastfile
  configurationPath = "../env/#{project}/Configuration.env"
  secretPath = "../env/#{project}/Secret.env"

  confLoaded = Dotenv.load(configurationPath)
  secretLoaded = Dotenv.overload(secretPath)

  if confLoaded.empty?
    UI.crash!("🐞 Environment in #{configurationPath} was not found or is empty.")
  end

  if secretLoaded.empty?
    UI.error("⚠️ Environment in #{secretPath} was not found or is empty. Not all integrations will work.")
  end

  Dotenv.require_keys('PROJECT_ID')
end

desc 'Configure the project from the environent'
private_lane :notify_deployment do |options|
  message = options[:message]
  payload = options[:payload].compact

  should_post_on_slack = ENV['SLACK_URL'] && ENV['SLACK_USERNAME']

  UI.message(message)
  payload.each do |key, value|
    UI.message "#{key} => #{value}"
  end
  
  if should_post_on_slack
    slack(
      message: message,
      username: ENV['SLACK_USERNAME'],
      slack_url: ENV['SLACK_URL'],
      channel: ENV['SLACK_CHANNEL'], # Optional, by default will post to the default channel configured for the POST URL.
      success: true, # Optional, defaults to true.
      payload: payload,
      default_payloads: [], # Optional, lets you specify a whitelist of default payloads to include. Pass an empty array to suppress all the default payloads.
      # Don't add this key, or pass nil, if you want all the default payloads. The available default payloads are: `lane`, `test_result`, `git_branch`, `git_author`, `last_git_commit_message`, `last_git_commit_hash`.
      attachment_properties: { # Optional, lets you specify any other properties available for attachments in the slack API (see https://api.slack.com/docs/attachments).
        # This hash is deep merged with the existing properties set using the other properties above. This allows your own fields properties to be appended to the existing fields that were created using the `payload` property for instance.
      }
    )
  end
end

### ------------ ANDROID ------------ ###
platform :android do
  manifestFile = './android/app/src/main/AndroidManifest.xml'
  appNameStringsFile = './android/app/src/main/res/values/strings.xml'
  apkPath = 'android/app/build/outputs/apk/release/app-release-unsigned.apk'

  ######################### PRIVATE LANES ##########################

  desc 'Configure the project from the environent'
  private_lane :configure do |_options|
    create_icons
    update_manifest
  end

  desc 'Fill the correct values into the manifest file'
  private_lane :update_manifest do
    # change both host entries
    xml_set_attribute(path_to_xml_file: manifestFile, xml_path: '//manifest//application//intent-filter//data[1][@android:scheme]', attribute_name: 'android:host', attribute_value: ENV['PROJECT_HOST_NAME'])
    xml_set_attribute(path_to_xml_file: manifestFile, xml_path: '//manifest//application//intent-filter//data[2][@android:scheme]', attribute_name: 'android:host', attribute_value: ENV['PROJECT_HOST_NAME'])

    xml_editor(path_to_xml_file: appNameStringsFile, xml_path: '//resources//string[@name=\'app_name\']', new_value: ENV['PROJECT_APP_NAME'])
  end

  desc 'Create the app icons'
  private_lane :create_icons do
    project = ENV['PROJECT_ENV']

    android_appicon(
      appicon_image_file: "./env/#{project}/AppIcon.png",
      appicon_icon_types: [:launcher],
      appicon_path: 'android/app/src/main/res/mipmap'
    )
    android_appicon(
      appicon_image_file: "./env/#{project}/NotificationIcon.png",
      appicon_icon_types: [:notification],
      appicon_path: 'android/app/src/main/res/drawable',
      appicon_filename: 'ic_appbar'
    )
  end

  ######################### PUBLIC LANES ###########################

  desc 'Build the app package locally'
  lane :development do
    configure()
    gradle(
      project_dir: './android/',
      build_type: "Debug",
      task: 'clean assemble'
    )
  end

  desc 'Make a release build'
  lane :release_build do |options|
    configure()

    # strip out invalid fields
    sign_options = {
      "android.injected.signing.store.file" => File.expand_path(ENV["ANDROID_KEYSTORE_PATH"]),
      "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
      "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"] || '',
      "android.injected.signing.key.password" => ENV["ANDROID_KEYSTORE_PASSWORD"] || '',
    }

    gradle(
      project_dir: './android/',
      build_type: options[:build_type] || 'Release',
      task: 'assemble',
      print_command: false, # hide signing from logs
      properties: sign_options
    )
  end

  desc 'Build the app package and deploy to hockey app and play store beta'
  lane :beta do
    increment_version_code()
    release_build(build_type: 'playstore')
    apk_file_name = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH];
    hockey(
      api_token: ENV['HOCKEY_API_TOKEN_ANDROID'],
      apk: apk_file_name
    )
    supply(
      apk: apk_file_name,
      track: 'beta',
      package_name: ENV['ANDROID_PROJECT_APP_ID']
    )
    notify_deployment(
      message: 'Android beta successfully released to Play Store and HockeyApp! You can be a beta tester by opening the beta link on your Android phone (Note that the build can appear with a delay), or by directly downloading the APK below onto your device.',
      payload: {
        'App Download URL' => lane_context[SharedValues::HOCKEY_DOWNLOAD_LINK],
        'Project' => ENV['PROJECT_ENV'],
        'Beta Test Url' => ENV['ANDROID_BETA_TEST_URL']
      }
    )
  end
end

### ------------ IOS ------------ ###
platform :ios do
  xcodeprojPath = 'ios/ios-pwa-wrapper.xcodeproj'
  plistPath = 'ios-pwa-wrapper/Info.plist'

  ######################### PRIVATE LANES ##########################

  desc 'Configure the project from the environent'
  private_lane :configure do |options|
    match(
      type: options[:export_method]
    )
    # Build the iOS app, with enabling the code signing automatically
    automatic_code_signing(
      use_automatic_signing: true,
      path: xcodeprojPath
    )
    # Set bundle & app name
    update_app_identifier(
      plist_path: plistPath,
      app_identifier: ENV['IOS_PROJECT_BUNDLE_ID'],
      xcodeproj: xcodeprojPath
    )
    update_info_plist(
      plist_path: plistPath,
      display_name: ENV['PROJECT_APP_NAME'],
      xcodeproj: xcodeprojPath
    )
    create_icons
  end

  desc 'Create the app icons'
  private_lane :create_icons do
    project = ENV['PROJECT_ENV']
    appicon(
      appicon_image_file: "env/#{project}/AppIcon.png",
      appicon_path: 'ios/ios-pwa-wrapper/Images.xcassets',
      appicon_devices: %i[ipad iphone ios_marketing watch watch_marketing]
    )
  end

  ######################### PUBLIC LANES ###########################

  desc 'Creates a local build of the app, configured from the env/project'
  lane :development do
    configure(export_method: 'development')
    # open in xcode, relative to fastlane path
    sh('open', "../#{xcodeprojPath}")
  end

  desc 'Make a release build'
  lane :release_build do
    configure(export_method: 'appstore')
    gym(
      export_method: 'app-store',
      # static options
      configuration: 'Release',
      project: xcodeprojPath,
      scheme: 'ios-pwa-wrapper',
      output_directory: 'fastlane/ipa',
      xcargs: '-allowProvisioningUpdates',
      export_xcargs: '-allowProvisioningUpdates',
      silent: false,
      clean: true,
      suppress_xcode_output: false,
      # env options
      output_name: ENV['PROJECT_APP_NAME']
    )
  end

  desc 'Deploys a release build of the app, configured from the env/project'
  lane :app_store do
    increment_build_number(
      xcodeproj: xcodeprojPath
    )
    release_build
    # TODO: Upload to store
  end

  desc 'Deploys a beta build of the app to testflight, configured from the env/project'
  lane :beta do
    increment_build_number(
      xcodeproj: xcodeprojPath
    )
    release_build
    upload_to_testflight(
      ipa: "fastlane/ipa/#{ENV['PROJECT_APP_NAME']}.ipa"
    )
  end
end
